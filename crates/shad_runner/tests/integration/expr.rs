use crate::{f32_buffer, i32_buffer, snippet_path, u32_buffer};
use shad_runner::Runner;

#[test]
#[allow(clippy::decimal_literal_representation, clippy::cognitive_complexity)]
fn run_valid() {
    let mut runner = Runner::new(snippet_path("expr_valid.shd")).unwrap();
    runner.run_step();
    assert_eq!(f32_buffer(&runner, "f32_zero"), 0.);
    assert_eq!(f32_buffer(&runner, "f32_no_frac_part"), 2.);
    assert_eq!(f32_buffer(&runner, "f32_many_digits"), 123_456_700.);
    assert_eq!(f32_buffer(&runner, "f32_max_int_digits"), 1.234_567_8e37);
    assert_eq!(f32_buffer(&runner, "f32_underscores"), 123_456_700.);
    assert_eq!(u32_buffer(&runner, "u32_zero"), 0);
    assert_eq!(u32_buffer(&runner, "u32_underscores"), 123_456_789);
    assert_eq!(u32_buffer(&runner, "u32_max_value"), 4_294_967_295);
    assert_eq!(i32_buffer(&runner, "i32_zero"), 0);
    assert_eq!(i32_buffer(&runner, "i32_underscores"), 123_456_789);
    assert_eq!(i32_buffer(&runner, "i32_max_value"), 2_147_483_647);
    assert_eq!(u32_buffer(&runner, "false_val"), 0);
    assert_eq!(u32_buffer(&runner, "true_val"), 1);
    assert_eq!(i32_buffer(&runner, "copied_buffer"), 2_147_483_647);
    assert_eq!(f32_buffer(&runner, "fn_call"), 16.);
    assert_eq!(i32_buffer(&runner, "fn_operator_add"), 6);
    assert_eq!(i32_buffer(&runner, "fn_operator_sub"), 2);
    assert_eq!(i32_buffer(&runner, "fn_operator_mul"), 8);
    assert_eq!(i32_buffer(&runner, "fn_operator_div"), 2);
    assert_eq!(i32_buffer(&runner, "fn_operator_mod"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_eq_true"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_eq_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_ne_true"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_ne_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_gt_true"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_gt_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_lt_true"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_lt_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_ge_true1"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_ge_true2"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_ge_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_le_true1"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_le_true2"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_le_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_and_true"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_and_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_or_true"), 1);
    assert_eq!(i32_buffer(&runner, "fn_operator_or_false"), 0);
    assert_eq!(i32_buffer(&runner, "fn_operator_neg"), -2);
    assert_eq!(i32_buffer(&runner, "fn_operator_not"), 1);
    assert_eq!(i32_buffer(&runner, "operator_add"), 6);
    assert_eq!(i32_buffer(&runner, "operator_sub"), 2);
    assert_eq!(i32_buffer(&runner, "operator_mul"), 8);
    assert_eq!(i32_buffer(&runner, "operator_div"), 2);
    assert_eq!(i32_buffer(&runner, "operator_mod"), 1);
    assert_eq!(i32_buffer(&runner, "operator_eq_true"), 1);
    assert_eq!(i32_buffer(&runner, "operator_eq_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_ne_true"), 1);
    assert_eq!(i32_buffer(&runner, "operator_ne_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_gt_true"), 1);
    assert_eq!(i32_buffer(&runner, "operator_gt_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_lt_true"), 1);
    assert_eq!(i32_buffer(&runner, "operator_lt_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_ge_true1"), 1);
    assert_eq!(i32_buffer(&runner, "operator_ge_true2"), 1);
    assert_eq!(i32_buffer(&runner, "operator_ge_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_le_true1"), 1);
    assert_eq!(i32_buffer(&runner, "operator_le_true2"), 1);
    assert_eq!(i32_buffer(&runner, "operator_le_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_and_true"), 1);
    assert_eq!(i32_buffer(&runner, "operator_and_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_or_true"), 1);
    assert_eq!(i32_buffer(&runner, "operator_or_false"), 0);
    assert_eq!(i32_buffer(&runner, "operator_neg"), -2);
    assert_eq!(i32_buffer(&runner, "operator_not"), 1);
    assert_eq!(i32_buffer(&runner, "operator_priority1"), 16);
    assert_eq!(i32_buffer(&runner, "operator_priority2"), -6);
}
