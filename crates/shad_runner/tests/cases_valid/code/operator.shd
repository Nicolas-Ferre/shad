gpu fn f32(value: i32) -> f32;
gpu fn __add__(left: f32, right: f32) -> f32;
gpu fn __add__(left: i32, right: i32) -> i32;
gpu fn __sub__(left: i32, right: i32) -> i32;
gpu fn __mul__(left: i32, right: i32) -> i32;
gpu fn __div__(left: i32, right: i32) -> i32;
gpu fn __mod__(left: i32, right: i32) -> i32;
gpu fn __eq__(left: i32, right: i32) -> bool;
gpu fn __ne__(left: i32, right: i32) -> bool;
gpu fn __gt__(left: i32, right: i32) -> bool;
gpu fn __lt__(left: i32, right: i32) -> bool;
gpu fn __ge__(left: i32, right: i32) -> bool;
gpu fn __le__(left: i32, right: i32) -> bool;
gpu fn __and__(left: bool, right: bool) -> bool;
gpu fn __or__(left: bool, right: bool) -> bool;
gpu fn __neg__(value: i32) -> i32;
gpu fn __not__(value: bool) -> bool;

buf fn_operator_add = __add__(4, 2);
buf fn_operator_sub = __sub__(4, 2);
buf fn_operator_mul = __mul__(4, 2);
buf fn_operator_div = __div__(4, 2);
buf fn_operator_mod = __mod__(5, 2);
buf fn_operator_eq_true = __eq__(5, 5);
buf fn_operator_eq_false = __eq__(5, 2);
buf fn_operator_ne_true = __ne__(5, 2);
buf fn_operator_ne_false = __ne__(5, 5);
buf fn_operator_gt_true = __gt__(5, 2);
buf fn_operator_gt_false = __gt__(5, 5);
buf fn_operator_lt_true = __lt__(2, 5);
buf fn_operator_lt_false = __lt__(5, 5);
buf fn_operator_ge_true1 = __ge__(5, 2);
buf fn_operator_ge_true2 = __ge__(5, 5);
buf fn_operator_ge_false = __ge__(2, 5);
buf fn_operator_le_true1 = __le__(2, 5);
buf fn_operator_le_true2 = __le__(5, 5);
buf fn_operator_le_false = __le__(5, 2);
buf fn_operator_and_true = __and__(true, true);
buf fn_operator_and_false = __and__(false, true);
buf fn_operator_or_true = __or__(false, true);
buf fn_operator_or_false = __or__(false, false);
buf fn_operator_neg = __neg__(2);
buf fn_operator_not = __not__(false);

buf operator_add = 4 + 2;
buf operator_sub = 4 - 2;
buf operator_mul = 4 * 2;
buf operator_div = 4 / 2;
buf operator_mod = 5 % 2;
buf operator_eq_true = 5 == 5;
buf operator_eq_false = 5 == 2;
buf operator_ne_true = 5 != 2;
buf operator_ne_false = 5 != 5;
buf operator_gt_true = 5 > 2;
buf operator_gt_false = 5 > 5;
buf operator_lt_true = 2 < 5;
buf operator_lt_false = 5 < 5;
buf operator_ge_true1 = 5 >= 2;
buf operator_ge_true2 = 5 >= 5;
buf operator_ge_false = 2 >= 5;
buf operator_le_true1 = 2 <= 5;
buf operator_le_true2 = 5 <= 5;
buf operator_le_false = 5 <= 2;
buf operator_and_true = true && true;
buf operator_and_false = false && true;
buf operator_or_true = false || true;
buf operator_or_false = false || false;
buf operator_neg = -2;
buf operator_not = !false;

buf operator_priority1 = 2 + 4 * 5 - 6;
buf operator_priority2 = (2 + 4) * (5 - 6);

buf custom_operator_result = 0.;

run {
    custom_operator_result = 10. + 3;
}

fn __add__(left: f32, right: i32) -> f32 {
    return left + f32(right);
}
